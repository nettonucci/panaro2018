<?xml version="1.0" encoding="utf-8"?>
<root>
  <!-- 
    Microsoft ResX Schema 
    
    Version 2.0
    
    The primary goals of this format is to allow a simple XML format 
    that is mostly human readable. The generation and parsing of the 
    various data types are done through the TypeConverter classes 
    associated with the data types.
    
    Example:
    
    ... ado.net/XML headers & schema ...
    <resheader name="resmimetype">text/microsoft-resx</resheader>
    <resheader name="version">2.0</resheader>
    <resheader name="reader">System.Resources.ResXResourceReader, System.Windows.Forms, ...</resheader>
    <resheader name="writer">System.Resources.ResXResourceWriter, System.Windows.Forms, ...</resheader>
    <data name="Name1"><value>this is my long string</value><comment>this is a comment</comment></data>
    <data name="Color1" type="System.Drawing.Color, System.Drawing">Blue</data>
    <data name="Bitmap1" mimetype="application/x-microsoft.net.object.binary.base64">
        <value>[base64 mime encoded serialized .NET Framework object]</value>
    </data>
    <data name="Icon1" type="System.Drawing.Icon, System.Drawing" mimetype="application/x-microsoft.net.object.bytearray.base64">
        <value>[base64 mime encoded string representing a byte array form of the .NET Framework object]</value>
        <comment>This is a comment</comment>
    </data>
                
    There are any number of "resheader" rows that contain simple 
    name/value pairs.
    
    Each data row contains a name, and value. The row also contains a 
    type or mimetype. Type corresponds to a .NET class that support 
    text/value conversion through the TypeConverter architecture. 
    Classes that don't support this are serialized and stored with the 
    mimetype set.
    
    The mimetype is used for serialized objects, and tells the 
    ResXResourceReader how to depersist the object. This is currently not 
    extensible. For a given mimetype the value must be set accordingly:
    
    Note - application/x-microsoft.net.object.binary.base64 is the format 
    that the ResXResourceWriter will generate, however the reader can 
    read any of the formats listed below.
    
    mimetype: application/x-microsoft.net.object.binary.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Binary.BinaryFormatter
            : and then encoded with base64 encoding.
    
    mimetype: application/x-microsoft.net.object.soap.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Soap.SoapFormatter
            : and then encoded with base64 encoding.

    mimetype: application/x-microsoft.net.object.bytearray.base64
    value   : The object must be serialized into a byte array 
            : using a System.ComponentModel.TypeConverter
            : and then encoded with base64 encoding.
    -->
  <xsd:schema id="root" xmlns="" xmlns:xsd="http://www.w3.org/2001/XMLSchema" xmlns:msdata="urn:schemas-microsoft-com:xml-msdata">
    <xsd:import namespace="http://www.w3.org/XML/1998/namespace" />
    <xsd:element name="root" msdata:IsDataSet="true">
      <xsd:complexType>
        <xsd:choice maxOccurs="unbounded">
          <xsd:element name="metadata">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" />
              </xsd:sequence>
              <xsd:attribute name="name" use="required" type="xsd:string" />
              <xsd:attribute name="type" type="xsd:string" />
              <xsd:attribute name="mimetype" type="xsd:string" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="assembly">
            <xsd:complexType>
              <xsd:attribute name="alias" type="xsd:string" />
              <xsd:attribute name="name" type="xsd:string" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="data">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
                <xsd:element name="comment" type="xsd:string" minOccurs="0" msdata:Ordinal="2" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" msdata:Ordinal="1" />
              <xsd:attribute name="type" type="xsd:string" msdata:Ordinal="3" />
              <xsd:attribute name="mimetype" type="xsd:string" msdata:Ordinal="4" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="resheader">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" />
            </xsd:complexType>
          </xsd:element>
        </xsd:choice>
      </xsd:complexType>
    </xsd:element>
  </xsd:schema>
  <resheader name="resmimetype">
    <value>text/microsoft-resx</value>
  </resheader>
  <resheader name="version">
    <value>2.0</value>
  </resheader>
  <resheader name="reader">
    <value>System.Resources.ResXResourceReader, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <resheader name="writer">
    <value>System.Resources.ResXResourceWriter, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <assembly alias="System.Drawing" name="System.Drawing, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a" />
  <data name="pictureBox1.Image" type="System.Drawing.Bitmap, System.Drawing" mimetype="application/x-microsoft.net.object.bytearray.base64">
    <value>
        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
</value>
  </data>
</root>